{"ast":null,"code":"import { pdfjs } from \"react-pdf\";\n\n// Path to the pdf.worker.js file\npdfjs.GlobalWorkerOptions.workerSrc = \"//cdnjs.cloudflare.com/ajax/libs/pdf.js/\".concat(pdfjs.version, \"/pdf.worker.js\");\n\n/**\r\n * Extracts text content from a PDF file.\r\n * @param {File} file - The PDF file to extract text from.\r\n * @returns {Promise<string>} A promise that resolves with the extracted text content.\r\n */\nconst pdfToText = async file => {\n  try {\n    // Create a blob URL for the PDF file\n    const blobUrl = URL.createObjectURL(file);\n\n    // Load the PDF file\n    const loadingTask = pdfjs.getDocument(blobUrl);\n    const pdf = await loadingTask.promise;\n    const numPages = pdf.numPages;\n    let extractedText = \"\";\n\n    // Iterate through each page and extract text\n    for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\n      const page = await pdf.getPage(pageNumber);\n      const textContent = await page.getTextContent();\n      const pageText = textContent.items.map(item => item.str).join(\" \");\n      extractedText += pageText;\n    }\n    if (extractedText.length > 0) {\n      return extractedText;\n    }\n    console.error(\"Error extracting text from PDF:\", error);\n\n    // Clean up the blob URL\n    URL.revokeObjectURL(blobUrl);\n  } catch (error) {\n    console.error(\"Error extracting text from PDF:\", error);\n  }\n};\nexport default pdfToText;","map":{"version":3,"names":["pdfjs","GlobalWorkerOptions","workerSrc","concat","version","pdfToText","file","blobUrl","URL","createObjectURL","loadingTask","getDocument","pdf","promise","numPages","extractedText","pageNumber","page","getPage","textContent","getTextContent","pageText","items","map","item","str","join","length","console","error","revokeObjectURL"],"sources":["/Users/keyondre/Desktop/VS_Code/CapStone/Front-Capstone/front-end-capstone/node_modules/react-pdftotext/index.js"],"sourcesContent":["import { pdfjs } from \"react-pdf\"\r\n\r\n// Path to the pdf.worker.js file\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`\r\n\r\n/**\r\n * Extracts text content from a PDF file.\r\n * @param {File} file - The PDF file to extract text from.\r\n * @returns {Promise<string>} A promise that resolves with the extracted text content.\r\n */\r\nconst pdfToText = async (file) => {\r\n    try {\r\n        // Create a blob URL for the PDF file\r\n        const blobUrl = URL.createObjectURL(file)\r\n\r\n        // Load the PDF file\r\n        const loadingTask = pdfjs.getDocument(blobUrl)\r\n\r\n        const pdf = await loadingTask.promise\r\n        const numPages = pdf.numPages\r\n        let extractedText = \"\"\r\n\r\n        // Iterate through each page and extract text\r\n        for (let pageNumber = 1; pageNumber <= numPages; pageNumber++) {\r\n            const page = await pdf.getPage(pageNumber)\r\n            const textContent = await page.getTextContent()\r\n            const pageText = textContent.items.map((item) => item.str).join(\" \")\r\n            extractedText += pageText\r\n        }\r\n        if (extractedText.length > 0) {\r\n            return extractedText\r\n        }\r\n        console.error(\"Error extracting text from PDF:\", error)\r\n\r\n        // Clean up the blob URL\r\n        URL.revokeObjectURL(blobUrl)\r\n    } catch (error) {\r\n        console.error(\"Error extracting text from PDF:\", error)\r\n    }\r\n}\r\n\r\nexport default pdfToText"],"mappings":"AAAA,SAASA,KAAK,QAAQ,WAAW;;AAEjC;AACAA,KAAK,CAACC,mBAAmB,CAACC,SAAS,8CAAAC,MAAA,CAA8CH,KAAK,CAACI,OAAO,mBAAgB;;AAE9G;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,MAAOC,IAAI,IAAK;EAC9B,IAAI;IACA;IACA,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;;IAEzC;IACA,MAAMI,WAAW,GAAGV,KAAK,CAACW,WAAW,CAACJ,OAAO,CAAC;IAE9C,MAAMK,GAAG,GAAG,MAAMF,WAAW,CAACG,OAAO;IACrC,MAAMC,QAAQ,GAAGF,GAAG,CAACE,QAAQ;IAC7B,IAAIC,aAAa,GAAG,EAAE;;IAEtB;IACA,KAAK,IAAIC,UAAU,GAAG,CAAC,EAAEA,UAAU,IAAIF,QAAQ,EAAEE,UAAU,EAAE,EAAE;MAC3D,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,OAAO,CAACF,UAAU,CAAC;MAC1C,MAAMG,WAAW,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;MAC/C,MAAMC,QAAQ,GAAGF,WAAW,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MACpEX,aAAa,IAAIM,QAAQ;IAC7B;IACA,IAAIN,aAAa,CAACY,MAAM,GAAG,CAAC,EAAE;MAC1B,OAAOZ,aAAa;IACxB;IACAa,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;;IAEvD;IACArB,GAAG,CAACsB,eAAe,CAACvB,OAAO,CAAC;EAChC,CAAC,CAAC,OAAOsB,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EAC3D;AACJ,CAAC;AAED,eAAexB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}